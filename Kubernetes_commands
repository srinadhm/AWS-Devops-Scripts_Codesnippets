root@master:~# kubeadm init
[init] Using Kubernetes version: v1.21.2
[preflight] Running pre-flight checks
        [WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local master] and IPs [10.96.0.1 172.31.32.228]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [localhost master] and IPs [172.31.32.228 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [localhost master] and IPs [172.31.32.228 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 11.003441 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.21" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node master as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: rqtt0h.ulxjluffh8bdu7ar
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.32.228:6443 --token rqtt0h.ulxjluffh8bdu7ar \
        --discovery-token-ca-cert-hash sha256:f33f8c144ab831ede364b294d21b3b4ebbe088a7454311083bec61448617efb4
		
root@master:~#





--------------------------------

kubernetest cluster types
minikube ( one working node 
kubeadm
kops
eks ( amazon provided ) 
--------------
how to see nodes 
kubectl get nodes
how to see pods 
kubectl get pods 
how to see port number and worker nodes 
kubectl get pods -o wide
how to see nodes meta data taint info, label info
kubectl describe nodes master 


difference between minikube and kubeadm
minikube we have only one machine for cluster (worker node)
kubeadm we can set up more than one clsuter machine worker nodes 
why nothing is scheduling on master 
if we remove taint on master then we run pods on master as well
kubectl taint nodes master  node-role.kubernetes.io/master:NoSchedule- 

Scaleup pod 

kubectl scale --replicas=3 deployment xyz
kubectl scale --replicas=3 pod nginx-pod

Nginx deployment
kubectl create deployment --image=nginx nginx-deployment
kubectl scale --replicas=3 deployment nginx-deployment

nginx deployment kubernetes yaml
------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80


nginx-pod.yaml
----------
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  namespace: default
  labels:
    app: nginx
spec:
  containers:
  - name: nginx-container
    image: nginx
    ports:
      - containerPort: 80
    resources:
      limits:
        cpu: "1"
      requests:
        cpu: "0.5"


springboot-pod.yaml
-----------------
apiVersion: v1
kind: Pod (deployment)
metadata:
  name: springboot-pod
  namespace: default
  labels:
    app: springboot 
spec:
  containers:
  - name: springboot-container (container name )  docker run container -d 
    image: srinadhdocker/springboot-docker-assignment:latest (docker hub image name ) docker build -t <image_name>:tag 
    ports:
      - containerPort: 33333 ( port number which was running for application 
    resources:
      limits:
        cpu: "1"
      requests:
        cpu: "0.5"
		
		
--------------------------
springboot-service.yaml
---------------------------
apiVersion: v1
kind: Service
metadata:
  name: springboot-service
spec:
  selector:
    app: springboot (pod label name ) 
  ports:
    - protocol: TCP
      port: 33333 ( port number mentioned in pod yaml)
      targetPort: 33333 ( port number mentioned in pod yaml)
      nodePort: 32699 ( port number allocated to run from outside )
  type: NodePort (load balancer)
  
  
 --------------------------
 
 root@master:~/minikube-setup# history
    1  clear
    2  sudo apt-get update -y
    3  apt-get update && apt-get install -y apt-transport-https curl
    4  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    5  clear
    6  cat<<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

    7  apt-get update -y
    8  swapoff -a
    9  modprobe br_netfilter
   10  sysctl -p
   11  sudo sysctl net.bridge.bridge-nf-call-iptables=1
   12  apt-get install docker.io -y
   13  sudo systemctl start docker
   14  clear
   15  docker --version
   16  apt-get install -y kubelet kubeadm kubectl kubernetes-cni
   17  clear
   18  systemctl daemon-reload
   19  systemctl start kubelet
   20  kubeadm init
   21  kubectl get  nodes
   22  export KUBECONFIG=/etc/kubernetes/admin.conf
   23  kubectl get  nodes
   24  clear
   25  # kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')
   26  kubectl get  nodes
   27  clear
   28  kubectl get nodes
   29  clear
   30  kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')
   31  kubectl get nodes
   32  clear
   33  git clone https://github.com/cloudtechmasters/minikube-setup.git
   34  ll
   35  cd mini
   36  cd minikube-setup/
   37  ll
   38  kubectl explain pod
   39  kubectl explain deployment
   40  kubectl explain hpa
   41  kubectl explain deployment
   42  kubectl explain service
   43  clear
   44  kubectl get ns
   45  clear
   46  kubectl apply -f nginx-pod.yaml
   47  kubectl get pods
   48  kubectl get pods --watch
   49  kubectl get pods
   50  kubectl get pods --watch
   51  kubectl get events
   52  kubectl get pods -o wide
   53  cleatr
   54  clear
   55  ll
   56  kubectl apply -f nginx-service.yaml
   57  clear
   58  cd
   59  git clone https://github.com/cloudtechmasters/springboot-docker-assignment-without-database.git
   60  cd springboot-docker-assignment-without-database/
   61  ll
   62  apt install maven
   63  mvn clean install
   64  ll
   65  vi Dockerfile
   66  docker image build -t srinadhdocker/springboot-docker-assignment:latest .
   67  docker images
   68  docker login
   69  docker push srinadhdocker/springboot-docker-assignment:latest
   70  clear
   71  cd
   72  vi springboot-pod.yaml
   73  kubectl apply -f springboot-pod.yaml
   74  kubectl get pods
   75  vi springboot-service.yaml
   76  clear
   77  vi springboot-service.yaml
   78  kubectl apply -f springboot-service.yaml
   79  kubectl get pods
   80  kubectl get pods -o wode
   81  kubectl get pods -o wide
   82  kubectl get pods -o wides
   83  kubectl get pods -o wide
   84  kubectl get node master
   85  kubectl describe node master
   86  kubectl taint nodes master  node-role.kubernetes.io/master:NoSchedule-
   87  clear
   88  kubectl get pods
   89  kubectl scale --replicas=3 pod nginx-pod
   90  cd minikube-setup/
   91  ll
   92  kubectl delete -f nginx-service.yaml
   93  kubectl delete -f nginx-pod.yaml
   94  kubectl get pods
   95  kubectl create deployment --image=nginx nginx-deployment
   96  kubectl get pods
   97  kubectl get pods -o wide
   98  kubectl scale --replicas=3 deployment nginx-deployment
   99  kubectl get pods -o wide
  100  kubectl delete deployment nginx-deployment
  101  kubectl get pods -o wide
  102  clear
  103  ll
  104  vi nginx-pod.yaml
  105  kubectl apply -f nginx-pod.yaml
  106  kubectl get nodes
  107  kubectl get pods
  108  kubectl get pods -o -wide
  109  kubectl get pods -o wide
  110  kubectl describe nodes master
  111  clear
  112  history
root@master:~/minikube-setup#

-----------------------------
worker node commands

root@worker-node:~# history
    1  clear
    2  sudo apt-get update -y
    3  apt-get update && apt-get install -y apt-transport-https curl
    4  clear
    5  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    6  cat<<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

    7  apt-get update -y
    8  swapoff -a
    9  modprobe br_netfilter
   10  sysctl -p
   11  sudo sysctl net.bridge.bridge-nf-call-iptables=1
   12  apt-get install docker.io -y
   13  sudo systemctl start docker
   14  clear
   15  docker --version
   16  apt-get install -y kubelet kubeadm kubectl kubernetes-cni
   17  clear
   18  systemctl daemon-reload
   19  systemctl start kubelet
   20  kubeadm join 172.31.32.228:6443 --token rqtt0h.ulxjluffh8bdu7ar         --discovery-token-ca-cert-hash sha256:f33f8c144ab831ede364b294d21b3b4ebbe088a7454311083bec61448617efb4
   21  kubectl get nodes
   22  history
root@worker-node:~#

--------------------------------


eksctl create cluster -f cluster.yaml

eksctl create cluster -f cluster.yml

curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
chmod +x ./kubectl
mkdir -p $HOME/bin
cp ./kubectl $HOME/bin/kubectl
export PATH=$HOME/bin:$PATH
echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
source $HOME/.bashrc
kubectl version --short --client

